#include "create_order.h"
#include "ui_create_order.h"

#include<string>
#include<QString>
#include<QStringList>
#include<QValidator>
#include"Orders.h"
#include"Dishs.h"

using namespace std;

extern string qstr2str_utf8(const QString qstr);
extern QString str2qstr_utf8(const string str);

create_order::create_order(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::create_order)
{
    /**
    * Auto generated by QT
    * This code is the constructor function of the UI
    * Auto input
    * Constructor Function
    */


    ui->setupUi(this);
    //set table header
    QStringList header;
    header<<"菜品名"<<"数量";
    ui->tableWidget->setHorizontalHeaderLabels(header);
    ui->tableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    ui->tableWidget->horizontalHeader()->setVisible(true);

    //connects

    //connect to "添加菜品" button
    connect(ui->lineEdit,SIGNAL(editingFinished()),this,SLOT(unlock_add()));
    connect(ui->lineEdit,SIGNAL(textChanged(QString)),this,SLOT(unlock_add()));
    connect(ui->dish_select,SIGNAL(currentIndexChanged(int)),this,SLOT(unlock_add()));

    //connect to "确认" button
    connect(ui->people_num,SIGNAL(editingFinished()),this,SLOT(unlock_confirm()));
    connect(ui->table_num,SIGNAL(editingFinished()),this,SLOT(unlock_confirm()));
    connect(ui->people_num,SIGNAL(textChanged(QString)),this,SLOT(unlock_confirm()));
    connect(ui->table_num,SIGNAL(textChanged(QString)),this,SLOT(unlock_confirm()));
    connect(ui->tableWidget,SIGNAL(currentItemChanged(QTableWidgetItem*,QTableWidgetItem*)),this,SLOT(unlock_del()));


    //read the dish list to the combobox
    int flag = 0;
    for(int i=1;i<Dishs::GetSize();i++){
        //qDebug()<<str2qstr_utf8(Dishs::GetDish(i+1).Getname());
        while (Dishs::GetDish(i + flag).GetID()==0)
            flag ++;
        if(Dishs::GetDish(i + flag).getsell()){
            ui->dish_select->addItem(str2qstr_utf8(Dishs::GetDish(i + flag).Getname()));
        }
    }

    //set range to dish number,tables,and how many people at each table
    QIntValidator* vl = new QIntValidator(1, 99, this);
    QIntValidator* vl2 = new QIntValidator(1, 99, this);
    QIntValidator* vl3 = new QIntValidator(1, 6, this);

    ui->lineEdit->setValidator(vl);
    ui->table_num->setValidator(vl2);
    ui->people_num->setValidator(vl3);



}

void create_order::on_confirm_clicked(){
    /**
    * Author:冯梓轩
    * "确认" button
    * No input
    * No output
    */
    int npeople=ui->people_num->text().toInt();//get people count
    int ntable=ui->table_num->text().toInt();//get table number
    Order new_order(ntable,npeople);
    //read the ordered dish to generate an order
    for(int i=0;i<ui->tableWidget->rowCount();i++){
        int temp_dishid=Dishs::GetDish(qstr2str_utf8(ui->tableWidget->item(i,0)->text())).GetID();
        int temp_dishcount=ui->tableWidget->item(i,1)->text().toInt();
        new_order.setDish(temp_dishid,temp_dishcount);
    }
    //read remark
    QString nremark=ui->remark->toPlainText();
    if(nremark!=""){
        new_order.setRemark(qstr2str_utf8(nremark));
    }else{
        new_order.setRemark("");
    }
    //set status to ordered
    new_order.setOrdered();
    //add to orders
    Orders::createOrder(new_order);
    int nid=new_order.getID();
    emit insertedOrder(nid,false);
    this->close();
}

void create_order::on_add_to_order_clicked(){
    /**
    * Author:冯梓轩
    * "添加菜品" button
    * No input
    * No output
    */
    QString dish_name=ui->dish_select->currentText();
    int new_dish_count=ui->lineEdit->text().toInt();
    bool is_new=true;
    //check if the dish already exists in the order
    for(int i=0;i<ui->tableWidget->rowCount();i++){
        if(ui->tableWidget->item(i,0)->text()==dish_name){//scan for dish name
            int dish_count=ui->tableWidget->item(i,1)->text().toInt();//scan for dish count
            dish_count+=new_dish_count;
            ui->tableWidget->item(i,1)->setText(QString::number(dish_count));//update the dish count
            is_new=false;
            break;
        }
    }
    //if the dish doesn't exist in the order
    if(is_new){
        int rows=ui->tableWidget->rowCount();
        //insert a new row
        ui->tableWidget->insertRow(rows);
        //fill cells
        QTableWidgetItem* c_dish=new QTableWidgetItem(dish_name);
        c_dish->setTextAlignment(Qt::AlignLeft|Qt::AlignVCenter);
        QTableWidgetItem* c_count=new QTableWidgetItem(QString::number(new_dish_count));
        c_count->setTextAlignment(Qt::AlignLeft|Qt::AlignVCenter);
        ui->tableWidget->setItem(rows,0,c_dish);
        ui->tableWidget->setItem(rows,1,c_count);
        //read only
        ui->tableWidget->item(rows,0)->setFlags(ui->tableWidget->item(rows,0)->flags() ^ Qt::ItemIsEditable);
        ui->tableWidget->item(rows,1)->setFlags(ui->tableWidget->item(rows,1)->flags() ^ Qt::ItemIsEditable);
        //enable remove_from_order button
        unlock_del();
    }
    return;

}

void create_order::unlock_add(){
    /**
    * Author:冯梓轩
    * 设置"添加菜品"按钮可用状态
    * No input
    * No output
    */
    if(ui->dish_select->currentIndex()!=-1&&ui->lineEdit->text()!=""&&ui->lineEdit->text().toInt()!=0){
        ui->add_to_order->setEnabled(true);
    }else{
        ui->add_to_order->setEnabled(false);
    }
}

void create_order::unlock_del(){
    /**
    * Author:冯梓轩
    * 设置"删除菜品"按钮可用状态
    * No input
    * No output
    */
    if(ui->tableWidget->currentRow()!=-1&&ui->tableWidget->currentColumn()!=-1){
        ui->remove_from_order->setEnabled(true);
    }else{
        ui->remove_from_order->setEnabled(false);
    }
    //check if the "confirm" button can be enabled
    unlock_confirm();
}

void create_order::unlock_confirm(){
    /**
    * Author:冯梓轩
    * 设置"确认"按钮可用状态
    * No input
    * No output
    */
    //qDebug()<<"triggered";
    if(ui->tableWidget->rowCount()!=0&&
       ui->people_num->text()!=""&&/*number of people entered*/
       ui->people_num->text().toInt()>0&&
       ui->people_num->text().toInt()<7&&
       ui->table_num->text()!=""&&/*table number entered*/
       ui->table_num->text().toInt()>0&&
       ui->table_num->text().toInt()<31){
        ui->confirm->setEnabled(true);
    }else{
        ui->confirm->setEnabled(false);
    }
}

void create_order::on_remove_from_order_clicked(){
    /**
    * Author:冯梓轩
    * "删除菜品" button
    * No input
    * No output
    */

    //get the index of the row to be deleted
    int del_row=ui->tableWidget->currentRow();
    //delete the row
    ui->tableWidget->removeRow(del_row);
    //check if "remove_from_order" button can be enabled
    unlock_del();
}
create_order::~create_order()
{
    delete ui;
}
